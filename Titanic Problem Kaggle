import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import RepeatedKFold
from sklearn.linear_model import LogisticRegression

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")


#funcao para transformar sexo para binario
def transformar_sexo(entrada):
  if entrada == 'female':
    return 1
  else:
    return 0

#criando o modelo Random Forest ou Regressao Logistica
#modelo = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=0)
modelo = LogisticRegression()

#Criando a nova coluna sex_bin(se for mulher = 1, se for homem = 0) nos dados train e test usando a funcao transformar_sexo
train['Sex_bin'] = train['Sex'].map(transformar_sexo)
test['Sex_bin'] = test['Sex'].map(transformar_sexo)

#Adicionando novas variaveis no nosso problema

#train
train['Embarked_S'] = (train['Embarked'] == 'S').astype(int)
train['Embarked_C'] = (train['Embarked'] == 'C').astype(int)
train['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)

train['Cabine_nula'] = train['Cabin'].isnull().astype(int)

#variaveis com titulos dos nomes
train['Nome_contem_Miss'] = train['Name'].str.contains("Miss").astype(int)
train['Nome_contem_Mrs'] = train['Name'].str.contains("Mrs").astype(int)
train['Nome_contem_Master'] = train['Name'].str.contains("Master").astype(int)
train['Nome_contem_Col'] = train['Name'].str.contains("Col").astype(int)
train['Nome_contem_Major'] = train['Name'].str.contains("Major").astype(int)
train['Nome_contem_Mr'] = train['Name'].str.contains("Mr").astype(int)

#test
test['Embarked_S'] = (test['Embarked'] == 'S').astype(int)
test['Embarked_C'] = (test['Embarked'] == 'C').astype(int)
test['Embarked_Q'] = (test['Embarked'] == 'Q').astype(int)

test['Cabine_nula'] = test['Cabin'].isnull().astype(int)

#variaveis com titulos dos nomes
test['Nome_contem_Miss'] = test['Name'].str.contains("Miss").astype(int)
test['Nome_contem_Mrs'] = test['Name'].str.contains("Mrs").astype(int)
test['Nome_contem_Master'] = test['Name'].str.contains("Master").astype(int)
test['Nome_contem_Col'] = test['Name'].str.contains("Col").astype(int)
test['Nome_contem_Major'] = test['Name'].str.contains("Major").astype(int)
test['Nome_contem_Mr'] = test['Name'].str.contains("Mr").astype(int)

#variaveis a serem utilizadas no problema
variaveis = ['Sex_bin', 'Age', 'Pclass', 'SibSp', 'Parch', 'Fare', 'Embarked_S', 'Embarked_C', 'Cabine_nula',
             'Nome_contem_Miss', 'Nome_contem_Mrs', 'Nome_contem_Master', 'Nome_contem_Col', 'Nome_contem_Major',
             'Nome_contem_Mr']

#Criando um modelo somente com as variaveis necessarias para o problema
X = train[variaveis]
y = train['Survived']

#funcao fillna para substituir dados que nao sao valores(NaN) para -1, ja que -1 nao tem um significado para nosso problema (correção de erro)
X = X.fillna(-1)

#Criando uma validacao para o modelo
resultados = []
kf = RepeatedKFold(n_splits=2, n_repeats=10, random_state=10)

for linhas_treino, linhas_valid in kf.split(X):
  print("Treino:", linhas_treino.shape[0])
  print("Valid:", linhas_valid.shape[0])

  X_treino, X_valid = X.iloc[linhas_treino], X.iloc[linhas_valid]
  y_treino, y_valid = y.iloc[linhas_treino], y.iloc[linhas_valid]

  modelo.fit(X_treino, y_treino)
  p = modelo.predict(X_valid)

  acc = np.mean(y_valid == p)
  resultados.append(acc)
  print("Acc:", acc)
  print()

print("Accuracy Final: ")
print(np.mean(resultados))

#retreinar o modelo para criar arquivo de predicçoes
modelo.fit(X, y)
p = modelo.predict(test[variaveis].fillna(-1))


#transformar o modelo predictado em objeto do tipo Series do panda, ordenado pelo Id do passageiro, gerando arquivo pra submitar no kaggle
sub = pd.Series(p, index=test['PassengerId'], name='Survived')

sub.to_csv("modelo_resultado.csv", header=True)
